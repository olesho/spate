// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscribe/subscribe.proto

/*
Package subscription is a generated protocol buffer package.

It is generated from these files:
	subscribe/subscribe.proto

It has these top-level messages:
	Subscription
	User
	SubscriptionsList
	Response
	Notification
	EmptySubscription
*/
package subscription

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Subscription struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Active bool   `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Subscription) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Subscription) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Subscription) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type User struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type SubscriptionsList struct {
	Response *Response       `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	List     []*Subscription `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *SubscriptionsList) Reset()                    { *m = SubscriptionsList{} }
func (m *SubscriptionsList) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionsList) ProtoMessage()               {}
func (*SubscriptionsList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubscriptionsList) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SubscriptionsList) GetList() []*Subscription {
	if m != nil {
		return m.List
	}
	return nil
}

type Response struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Notification struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Body   string `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Url    string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Notification) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Notification) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type EmptySubscription struct {
}

func (m *EmptySubscription) Reset()                    { *m = EmptySubscription{} }
func (m *EmptySubscription) String() string            { return proto.CompactTextString(m) }
func (*EmptySubscription) ProtoMessage()               {}
func (*EmptySubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Subscription)(nil), "subscription.Subscription")
	proto.RegisterType((*User)(nil), "subscription.User")
	proto.RegisterType((*SubscriptionsList)(nil), "subscription.SubscriptionsList")
	proto.RegisterType((*Response)(nil), "subscription.Response")
	proto.RegisterType((*Notification)(nil), "subscription.Notification")
	proto.RegisterType((*EmptySubscription)(nil), "subscription.EmptySubscription")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SubscribeService service

type SubscribeServiceClient interface {
	Create(ctx context.Context, in *Subscription, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	List(ctx context.Context, in *EmptySubscription, opts ...client.CallOption) (*SubscriptionsList, error)
	Notify(ctx context.Context, in *Notification, opts ...client.CallOption) (*Response, error)
}

type subscribeServiceClient struct {
	c           client.Client
	serviceName string
}

func NewSubscribeServiceClient(serviceName string, c client.Client) SubscribeServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "subscription"
	}
	return &subscribeServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *subscribeServiceClient) Create(ctx context.Context, in *Subscription, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "SubscribeService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeServiceClient) Delete(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "SubscribeService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeServiceClient) List(ctx context.Context, in *EmptySubscription, opts ...client.CallOption) (*SubscriptionsList, error) {
	req := c.c.NewRequest(c.serviceName, "SubscribeService.List", in)
	out := new(SubscriptionsList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeServiceClient) Notify(ctx context.Context, in *Notification, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "SubscribeService.Notify", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubscribeService service

type SubscribeServiceHandler interface {
	Create(context.Context, *Subscription, *Response) error
	Delete(context.Context, *User, *Response) error
	List(context.Context, *EmptySubscription, *SubscriptionsList) error
	Notify(context.Context, *Notification, *Response) error
}

func RegisterSubscribeServiceHandler(s server.Server, hdlr SubscribeServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&SubscribeService{hdlr}, opts...))
}

type SubscribeService struct {
	SubscribeServiceHandler
}

func (h *SubscribeService) Create(ctx context.Context, in *Subscription, out *Response) error {
	return h.SubscribeServiceHandler.Create(ctx, in, out)
}

func (h *SubscribeService) Delete(ctx context.Context, in *User, out *Response) error {
	return h.SubscribeServiceHandler.Delete(ctx, in, out)
}

func (h *SubscribeService) List(ctx context.Context, in *EmptySubscription, out *SubscriptionsList) error {
	return h.SubscribeServiceHandler.List(ctx, in, out)
}

func (h *SubscribeService) Notify(ctx context.Context, in *Notification, out *Response) error {
	return h.SubscribeServiceHandler.Notify(ctx, in, out)
}

func init() { proto.RegisterFile("subscribe/subscribe.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4f, 0xea, 0x40,
	0x14, 0xa5, 0x1f, 0xaf, 0xaf, 0x5c, 0xc8, 0x0b, 0xdc, 0xf7, 0xc2, 0xab, 0x6c, 0x68, 0x66, 0xd5,
	0x55, 0x35, 0x35, 0x71, 0xe9, 0x46, 0x5d, 0x68, 0x8c, 0x8b, 0x21, 0xac, 0x0d, 0x2d, 0xd7, 0x64,
	0x42, 0x65, 0x9a, 0x99, 0x01, 0xc3, 0x1f, 0xf1, 0xf7, 0x9a, 0x8e, 0x40, 0x8a, 0xa6, 0xb8, 0xbb,
	0x67, 0x7a, 0x3a, 0xf7, 0x7c, 0x0c, 0x9c, 0xe9, 0x75, 0xae, 0x0b, 0x25, 0x72, 0x3a, 0x3f, 0x4c,
	0x69, 0xa5, 0xa4, 0x91, 0xd8, 0xdf, 0x1d, 0x54, 0x46, 0xc8, 0x15, 0x9b, 0x41, 0x7f, 0xda, 0xc0,
	0xf8, 0x1f, 0x7e, 0xaf, 0x35, 0xa9, 0x67, 0xb1, 0x88, 0x9c, 0xd8, 0x49, 0x3c, 0x1e, 0xd4, 0xf0,
	0x7e, 0x81, 0xff, 0xe0, 0x97, 0x91, 0x4b, 0x5a, 0x45, 0x6e, 0xec, 0x24, 0x5d, 0xfe, 0x09, 0x70,
	0x04, 0xc1, 0xbc, 0x30, 0x62, 0x43, 0x91, 0x17, 0x3b, 0x49, 0xc8, 0x77, 0x88, 0x4d, 0xc0, 0x9f,
	0x69, 0x52, 0xad, 0xd7, 0xb1, 0x37, 0x18, 0x36, 0xf7, 0xea, 0x47, 0xa1, 0x0d, 0x66, 0x10, 0x2a,
	0xd2, 0x95, 0x5c, 0x69, 0xb2, 0xf4, 0x5e, 0x36, 0x4a, 0x9b, 0x6a, 0x53, 0xbe, 0xfb, 0xca, 0x0f,
	0x3c, 0x4c, 0xc1, 0x2f, 0x85, 0x36, 0x91, 0x1b, 0x7b, 0x49, 0x2f, 0x1b, 0x1f, 0xf3, 0x9b, 0x2b,
	0xb8, 0xe5, 0xb1, 0x0b, 0x08, 0xf7, 0xb7, 0xe0, 0x1f, 0x70, 0xe5, 0xd2, 0x6e, 0x0a, 0xb9, 0x2b,
	0x97, 0xb5, 0x47, 0x52, 0x4a, 0xaa, 0xbd, 0x47, 0x0b, 0x58, 0x01, 0xfd, 0x27, 0x69, 0xc4, 0x8b,
	0x28, 0xe6, 0x3f, 0x47, 0x24, 0x4c, 0x49, 0x87, 0x88, 0x6a, 0x80, 0x08, 0x7e, 0x2e, 0x17, 0x5b,
	0x1b, 0x50, 0x97, 0xdb, 0x19, 0x07, 0xe0, 0xad, 0x55, 0x19, 0xf9, 0xf6, 0xa8, 0x1e, 0xd9, 0x5f,
	0x18, 0xde, 0xbd, 0x56, 0x66, 0xdb, 0x54, 0x9c, 0xbd, 0xbb, 0x30, 0x98, 0xee, 0xeb, 0x9b, 0x92,
	0xda, 0x88, 0x82, 0xf0, 0x1a, 0x82, 0x1b, 0x45, 0x73, 0x43, 0x78, 0xc2, 0xec, 0xb8, 0x25, 0x38,
	0xd6, 0xc1, 0x2b, 0x08, 0x6e, 0xa9, 0x24, 0x43, 0x88, 0xc7, 0x9c, 0xba, 0xb0, 0x13, 0xff, 0x3d,
	0x80, 0x6f, 0x4b, 0x9a, 0x1c, 0x33, 0xbe, 0xa9, 0x1e, 0x4f, 0xda, 0x65, 0xd9, 0x9a, 0x59, 0xa7,
	0xf6, 0x60, 0x23, 0xdd, 0x7e, 0xf5, 0xd0, 0x0c, 0xba, 0x5d, 0x4b, 0x1e, 0xd8, 0xa7, 0x7c, 0xf9,
	0x11, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x29, 0x86, 0x6b, 0xe7, 0x02, 0x00, 0x00,
}
