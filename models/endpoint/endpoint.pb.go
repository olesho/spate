// Code generated by protoc-gen-go. DO NOT EDIT.
// source: endpoint/endpoint.proto

/*
Package endpoint is a generated protocol buffer package.

It is generated from these files:
	endpoint/endpoint.proto

It has these top-level messages:
	Endpoint
	EndpointsListResponse
	EndpointsResponse
	Response
	EndpointID
	UserID
	Key
	EndpointURL
	Body
	DataEvent
	EndpointEmpty
*/
package endpoint

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Endpoint struct {
	ID          int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Method      string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Header      string `protobuf:"bytes,4,opt,name=header" json:"header,omitempty"`
	Body        string `protobuf:"bytes,5,opt,name=body" json:"body,omitempty"`
	User        int64  `protobuf:"varint,6,opt,name=user" json:"user,omitempty"`
	MinInterval int64  `protobuf:"varint,7,opt,name=min_interval,json=minInterval" json:"min_interval,omitempty"`
	MaxInterval int64  `protobuf:"varint,8,opt,name=max_interval,json=maxInterval" json:"max_interval,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Endpoint) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Endpoint) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Endpoint) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Endpoint) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *Endpoint) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Endpoint) GetUser() int64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *Endpoint) GetMinInterval() int64 {
	if m != nil {
		return m.MinInterval
	}
	return 0
}

func (m *Endpoint) GetMaxInterval() int64 {
	if m != nil {
		return m.MaxInterval
	}
	return 0
}

type EndpointsListResponse struct {
	Response *Response   `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	List     []*Endpoint `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *EndpointsListResponse) Reset()                    { *m = EndpointsListResponse{} }
func (m *EndpointsListResponse) String() string            { return proto.CompactTextString(m) }
func (*EndpointsListResponse) ProtoMessage()               {}
func (*EndpointsListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EndpointsListResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *EndpointsListResponse) GetList() []*Endpoint {
	if m != nil {
		return m.List
	}
	return nil
}

type EndpointsResponse struct {
	Response *Response `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Endpoint *Endpoint `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *EndpointsResponse) Reset()                    { *m = EndpointsResponse{} }
func (m *EndpointsResponse) String() string            { return proto.CompactTextString(m) }
func (*EndpointsResponse) ProtoMessage()               {}
func (*EndpointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EndpointsResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *EndpointsResponse) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type Response struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EndpointID struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EndpointID) Reset()                    { *m = EndpointID{} }
func (m *EndpointID) String() string            { return proto.CompactTextString(m) }
func (*EndpointID) ProtoMessage()               {}
func (*EndpointID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EndpointID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UserID struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserID) Reset()                    { *m = UserID{} }
func (m *UserID) String() string            { return proto.CompactTextString(m) }
func (*UserID) ProtoMessage()               {}
func (*UserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Key struct {
	Key int64 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Key) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

type EndpointURL struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *EndpointURL) Reset()                    { *m = EndpointURL{} }
func (m *EndpointURL) String() string            { return proto.CompactTextString(m) }
func (*EndpointURL) ProtoMessage()               {}
func (*EndpointURL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EndpointURL) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Body struct {
	Created string `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Body) Reset()                    { *m = Body{} }
func (m *Body) String() string            { return proto.CompactTextString(m) }
func (*Body) ProtoMessage()               {}
func (*Body) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Body) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Body) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DataEvent struct {
	User int64  `protobuf:"varint,1,opt,name=user" json:"user,omitempty"`
	Key  int64  `protobuf:"varint,2,opt,name=key" json:"key,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (m *DataEvent) Reset()                    { *m = DataEvent{} }
func (m *DataEvent) String() string            { return proto.CompactTextString(m) }
func (*DataEvent) ProtoMessage()               {}
func (*DataEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DataEvent) GetUser() int64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *DataEvent) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *DataEvent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type EndpointEmpty struct {
}

func (m *EndpointEmpty) Reset()                    { *m = EndpointEmpty{} }
func (m *EndpointEmpty) String() string            { return proto.CompactTextString(m) }
func (*EndpointEmpty) ProtoMessage()               {}
func (*EndpointEmpty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*Endpoint)(nil), "endpoint.Endpoint")
	proto.RegisterType((*EndpointsListResponse)(nil), "endpoint.EndpointsListResponse")
	proto.RegisterType((*EndpointsResponse)(nil), "endpoint.EndpointsResponse")
	proto.RegisterType((*Response)(nil), "endpoint.Response")
	proto.RegisterType((*EndpointID)(nil), "endpoint.EndpointID")
	proto.RegisterType((*UserID)(nil), "endpoint.UserID")
	proto.RegisterType((*Key)(nil), "endpoint.Key")
	proto.RegisterType((*EndpointURL)(nil), "endpoint.EndpointURL")
	proto.RegisterType((*Body)(nil), "endpoint.Body")
	proto.RegisterType((*DataEvent)(nil), "endpoint.DataEvent")
	proto.RegisterType((*EndpointEmpty)(nil), "endpoint.EndpointEmpty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EndpointService service

type EndpointServiceClient interface {
	Create(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EndpointsResponse, error)
	Read(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*EndpointsResponse, error)
	Update(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EndpointsResponse, error)
	Delete(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error)
	List(ctx context.Context, in *UserID, opts ...client.CallOption) (*EndpointsListResponse, error)
	Trigger(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error)
	Start(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error)
	Stop(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error)
	Data(ctx context.Context, in *Key, opts ...client.CallOption) (*Body, error)
	Status(ctx context.Context, in *EndpointEmpty, opts ...client.CallOption) (*Response, error)
}

type endpointServiceClient struct {
	c           client.Client
	serviceName string
}

func NewEndpointServiceClient(serviceName string, c client.Client) EndpointServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "endpoint"
	}
	return &endpointServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *endpointServiceClient) Create(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EndpointsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Create", in)
	out := new(EndpointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Read(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*EndpointsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Read", in)
	out := new(EndpointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Update(ctx context.Context, in *Endpoint, opts ...client.CallOption) (*EndpointsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Update", in)
	out := new(EndpointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Delete(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) List(ctx context.Context, in *UserID, opts ...client.CallOption) (*EndpointsListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.List", in)
	out := new(EndpointsListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Trigger(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Trigger", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Start(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Start", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Stop(ctx context.Context, in *EndpointID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Stop", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Data(ctx context.Context, in *Key, opts ...client.CallOption) (*Body, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Data", in)
	out := new(Body)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) Status(ctx context.Context, in *EndpointEmpty, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "EndpointService.Status", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EndpointService service

type EndpointServiceHandler interface {
	Create(context.Context, *Endpoint, *EndpointsResponse) error
	Read(context.Context, *EndpointID, *EndpointsResponse) error
	Update(context.Context, *Endpoint, *EndpointsResponse) error
	Delete(context.Context, *EndpointID, *Response) error
	List(context.Context, *UserID, *EndpointsListResponse) error
	Trigger(context.Context, *EndpointID, *Response) error
	Start(context.Context, *EndpointID, *Response) error
	Stop(context.Context, *EndpointID, *Response) error
	Data(context.Context, *Key, *Body) error
	Status(context.Context, *EndpointEmpty, *Response) error
}

func RegisterEndpointServiceHandler(s server.Server, hdlr EndpointServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&EndpointService{hdlr}, opts...))
}

type EndpointService struct {
	EndpointServiceHandler
}

func (h *EndpointService) Create(ctx context.Context, in *Endpoint, out *EndpointsResponse) error {
	return h.EndpointServiceHandler.Create(ctx, in, out)
}

func (h *EndpointService) Read(ctx context.Context, in *EndpointID, out *EndpointsResponse) error {
	return h.EndpointServiceHandler.Read(ctx, in, out)
}

func (h *EndpointService) Update(ctx context.Context, in *Endpoint, out *EndpointsResponse) error {
	return h.EndpointServiceHandler.Update(ctx, in, out)
}

func (h *EndpointService) Delete(ctx context.Context, in *EndpointID, out *Response) error {
	return h.EndpointServiceHandler.Delete(ctx, in, out)
}

func (h *EndpointService) List(ctx context.Context, in *UserID, out *EndpointsListResponse) error {
	return h.EndpointServiceHandler.List(ctx, in, out)
}

func (h *EndpointService) Trigger(ctx context.Context, in *EndpointID, out *Response) error {
	return h.EndpointServiceHandler.Trigger(ctx, in, out)
}

func (h *EndpointService) Start(ctx context.Context, in *EndpointID, out *Response) error {
	return h.EndpointServiceHandler.Start(ctx, in, out)
}

func (h *EndpointService) Stop(ctx context.Context, in *EndpointID, out *Response) error {
	return h.EndpointServiceHandler.Stop(ctx, in, out)
}

func (h *EndpointService) Data(ctx context.Context, in *Key, out *Body) error {
	return h.EndpointServiceHandler.Data(ctx, in, out)
}

func (h *EndpointService) Status(ctx context.Context, in *EndpointEmpty, out *Response) error {
	return h.EndpointServiceHandler.Status(ctx, in, out)
}

func init() { proto.RegisterFile("endpoint/endpoint.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6f, 0xda, 0x30,
	0x14, 0x26, 0x21, 0x84, 0xf4, 0xd1, 0xd2, 0xce, 0xea, 0x46, 0xc4, 0x26, 0x95, 0xf9, 0xb0, 0xf5,
	0xc4, 0x26, 0xda, 0x69, 0x87, 0xde, 0xd6, 0x70, 0x40, 0xed, 0x29, 0x8c, 0xf3, 0xe4, 0x36, 0x4f,
	0xad, 0x05, 0xc4, 0x91, 0x63, 0x50, 0xf9, 0xe3, 0xf6, 0x0f, 0xec, 0xaf, 0x9a, 0x6c, 0xe2, 0xa4,
	0x13, 0x99, 0x2a, 0x7a, 0x7b, 0x3f, 0x3e, 0xbf, 0xef, 0xc5, 0xdf, 0xe7, 0x40, 0x0f, 0xd3, 0x24,
	0x13, 0x3c, 0x55, 0x5f, 0x6c, 0x30, 0xcc, 0xa4, 0x50, 0x82, 0x04, 0x36, 0xa7, 0x7f, 0x1c, 0x08,
	0xc6, 0x45, 0x42, 0xba, 0xe0, 0x4e, 0xa2, 0xd0, 0x19, 0x38, 0xe7, 0xcd, 0xd8, 0x9d, 0x44, 0xe4,
	0x1d, 0xf8, 0x4b, 0x54, 0x8f, 0x22, 0x09, 0xdd, 0x81, 0x73, 0x7e, 0x10, 0x17, 0x19, 0x39, 0x81,
	0xe6, 0x4a, 0x2e, 0xc2, 0xa6, 0x29, 0xea, 0x50, 0x23, 0x1f, 0x91, 0x25, 0x28, 0x43, 0x6f, 0x8b,
	0xdc, 0x66, 0x84, 0x80, 0x77, 0x27, 0x92, 0x4d, 0xd8, 0x32, 0x55, 0x13, 0xeb, 0xda, 0x2a, 0x47,
	0x19, 0xfa, 0x86, 0xc7, 0xc4, 0xe4, 0x23, 0x1c, 0x2e, 0x79, 0xfa, 0x8b, 0xa7, 0x0a, 0xe5, 0x9a,
	0x2d, 0xc2, 0xb6, 0xe9, 0x75, 0x96, 0x3c, 0x9d, 0x14, 0x25, 0x03, 0x61, 0x4f, 0x15, 0x24, 0x28,
	0x20, 0xec, 0xc9, 0x42, 0xa8, 0x80, 0xb7, 0xf6, 0x5b, 0xf2, 0x5b, 0x9e, 0xab, 0x18, 0xf3, 0x4c,
	0xa4, 0x39, 0x92, 0x21, 0x04, 0xb2, 0x88, 0xcd, 0xe7, 0x75, 0x46, 0x64, 0x58, 0x5e, 0x89, 0x45,
	0xc5, 0x25, 0x86, 0x7c, 0x02, 0x6f, 0xc1, 0x73, 0x15, 0xba, 0x83, 0xe6, 0xbf, 0x58, 0x3b, 0x3e,
	0x36, 0x7d, 0x9a, 0xc3, 0x9b, 0x92, 0xf0, 0xd5, 0x64, 0x43, 0x28, 0xe5, 0x30, 0xf7, 0x5c, 0x4f,
	0x58, 0x49, 0xf6, 0x15, 0x82, 0x92, 0xab, 0x0b, 0xae, 0x98, 0x1b, 0x96, 0x20, 0x76, 0xc5, 0x9c,
	0x9c, 0x42, 0x0b, 0xa5, 0x14, 0xb2, 0x10, 0x6c, 0x9b, 0xd0, 0x0f, 0x00, 0x76, 0xce, 0x24, 0xd2,
	0x67, 0x78, 0x62, 0x55, 0xe6, 0x09, 0x0d, 0xc1, 0x9f, 0xe5, 0x28, 0x6b, 0x3a, 0x3d, 0x68, 0xde,
	0xe0, 0x46, 0xcb, 0x3d, 0xc7, 0x4d, 0x51, 0xd7, 0x21, 0x3d, 0x83, 0x8e, 0x1d, 0x38, 0x8b, 0x6f,
	0xad, 0x1f, 0x9c, 0xd2, 0x0f, 0xf4, 0x12, 0xbc, 0x1f, 0x5a, 0xeb, 0x10, 0xda, 0xf7, 0x12, 0x99,
	0xc2, 0xa4, 0xe8, 0xda, 0x54, 0xbb, 0x20, 0x61, 0x8a, 0x99, 0x45, 0x0f, 0x63, 0x13, 0xd3, 0x6b,
	0x38, 0x88, 0x98, 0x62, 0xe3, 0x35, 0xa6, 0xaa, 0xb4, 0x89, 0xf3, 0xcc, 0x26, 0xc5, 0x26, 0x6e,
	0xb9, 0xc9, 0xae, 0x15, 0xe9, 0x31, 0x1c, 0xd9, 0xdd, 0xc6, 0xcb, 0x4c, 0x6d, 0x46, 0xbf, 0x3d,
	0x38, 0xb6, 0x95, 0x29, 0xca, 0x35, 0xbf, 0x47, 0x72, 0x05, 0xfe, 0xb5, 0x59, 0x84, 0xd4, 0xdc,
	0x75, 0xff, 0xfd, 0x6e, 0xad, 0x94, 0x97, 0x36, 0xc8, 0x15, 0x78, 0x31, 0xb2, 0x84, 0x9c, 0xee,
	0xc2, 0x26, 0xd1, 0xcb, 0x87, 0xfd, 0x59, 0x96, 0xbc, 0x92, 0xf9, 0x12, 0xfc, 0x08, 0x17, 0xa8,
	0xf0, 0x3f, 0xdc, 0x35, 0x46, 0xdb, 0xee, 0xab, 0x5f, 0x03, 0x39, 0xa9, 0xba, 0x5b, 0xc1, 0xfb,
	0x67, 0x35, 0x74, 0xcf, 0x1f, 0x0e, 0x6d, 0x90, 0x6f, 0xd0, 0xfe, 0x29, 0xf9, 0xc3, 0x03, 0xca,
	0xbd, 0x38, 0x2f, 0xa0, 0x35, 0x55, 0x4c, 0xaa, 0xbd, 0x0e, 0x8d, 0xc0, 0x9b, 0x2a, 0x91, 0xed,
	0x75, 0xe6, 0x33, 0x78, 0xda, 0x33, 0xe4, 0xa8, 0xea, 0xde, 0xe0, 0xa6, 0xdf, 0xad, 0x52, 0x6d,
	0x44, 0xda, 0x20, 0xdf, 0xc1, 0x9f, 0x2a, 0xa6, 0x56, 0x39, 0xe9, 0xed, 0x8e, 0x37, 0x4e, 0xa9,
	0x67, 0xb8, 0xf3, 0xcd, 0x3f, 0xf3, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x25, 0xa9,
	0x23, 0x4e, 0x05, 0x00, 0x00,
}
